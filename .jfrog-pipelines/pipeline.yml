resources:
  - name: GitHubVaultPluginRepoJFrog
    type: GitRepo
    configuration:
      gitProvider: partnership_github
      path: {{.jfrog-pipelines.sourceRepository}}
      branches:
        include: master
      buildOn:
        commit: true
        pullRequestCreate: true
      cancelPendingRunsOn:
        pullRequestUpdate: true
pipelines:
  - name: vault_plugin_artifactory
    steps:
      - name: build_and_test_vault_plugin
        type: Bash
        configuration:
          priority: 1
          timeoutSeconds: 600 # 10 minutes
          runtime:
            type: image
            image:
              auto:
                language: go
                versions:
                  - "1.21"
          requiresApproval:
            approvers:
              - alexh
              - danielmi
            notifications:
              - integrationName: partnership_slack
            timeoutSeconds: 172800 # 2 days
          integrations:
            - name: partnership_slack
            - name: partnership_github
            - name: partnership_rt_cluster_license
          inputResources:
            - name: GitHubVaultPluginRepoJFrog
        execution:
          onStart:
            - cd ${res_GitHubVaultPluginRepoJFrog_resourcePath} # we need to manually move into the resource path
            - echo "Pending"
            - export STATE="pending"
            - export DESCRIPTION="Pipeline run is in progress."
            - ./scripts/github-status.sh ${res_GitHubVaultPluginRepoJFrog_gitProvider_token} ${res_GitHubVaultPluginRepoJFrog_gitRepoFullName} ${res_GitHubVaultPluginRepoJFrog_commitSha}
            - echo "Install GoReleaser"
            - echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
            - sudo apt update
            - sudo apt install goreleaser
            - ls -al && pwd
            - echo "Helm 3 install"
            - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && chmod 700 get_helm.sh
            - echo "Run Helm installation script" && ./get_helm.sh && rm get_helm.sh
            - helm version
            - printenv
          onExecute:
            - echo "Verify the code contents merged feature branch with master branch (detached mode)"
            - git branch && ls -al
            - add_run_variables PLUGIN_VERSION=$(git describe --tags --abbrev=0 | sed  -n 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1.\2.\3/p')
            - export NEXT_VERSION=${PLUGIN_VERSION} && echo ${NEXT_VERSION}
            - echo "Save RT licenses from the variable to the license file"
            - echo ${int_partnership_rt_cluster_license_5licenses} > scripts/artifactory.lic
            - more scripts/artifactory.lic
            - echo "Set Artifactory version, run RT in a container"
            - helm repo add artifactory https://charts.jfrog.io
            - helm repo update
            - add_run_variables ARTIFACTORY_VERSION=$(helm search repo | grep "artifactory " | awk '{$1=$1};1' |  cut -f3 -d " ")
            - echo "Artifactory version ${ARTIFACTORY_VERSION}"
            - export ARTIFACTORY_CONTAINER_NAME=artifactory
            - >-
              docker run -i --name ${ARTIFACTORY_CONTAINER_NAME} -t -d --rm -v "${res_GitHubVaultPluginRepoJFrog_resourcePath}/scripts/artifactory.lic:/artifactory_extra_conf/artifactory.lic:ro" \
                    -p8081:8081 -p8082:8082 -p8080:8080 releases-docker.jfrog.io/jfrog/artifactory-pro:${ARTIFACTORY_VERSION}
            - echo "Set localhost to a container IP address, since we run docker inside of docker"
            - export LOCALHOST=$(docker inspect -f '{{`{{range.NetworkSettings.Networks}}{{.Gateway}}{{end}}`}}' ${ARTIFACTORY_CONTAINER_NAME})
            - echo "Using ${LOCALHOST} as 'localhost' ip address"
            - echo "Waiting for Artifactory to start (doesn't reflect the start of the UI!)"
            - >-
              until curl -sf -u admin:password http://${LOCALHOST}:8081/artifactory/api/system/licenses/; do
                  printf '.'
                  sleep 4
              done
            - echo "Add variables needed to run Terraform Provider"
            - export JFROG_URL="http://${LOCALHOST}:8082"
            - echo "Get cookie to generate Access token. We need a pause to let UI come up to get cookies"
            - >-
              until curl -sf -o /dev/null -u admin:password ${JFROG_URL}/ui/login/; do
                  printf '.' > /dev/stderr
                  sleep 4
              done
            - sudo curl http://${LOCALHOST}:8082/router/api/v1/system/health
            - >-
              export COOKIES=$(curl -c - "${JFROG_URL}/ui/api/v1/ui/auth/login?_spring_security_remember_me=false" \
                            --header "accept: application/json, text/plain, */*" \
                            --header "content-type: application/json;charset=UTF-8" \
                            --header "x-requested-with: XMLHttpRequest" \
                            -d '{"user":"admin","password":"'"password"'","type":"login"}' | grep FALSE)
            - export REFRESHTOKEN=$(echo $COOKIES | grep REFRESHTOKEN | awk '{print $7}')
            - export ACCESSTOKEN=$(echo $COOKIES | grep ACCESSTOKEN | awk '{print $14}') # awk returns null on Mac, and the actual key on Ubuntu 20
            - >-
              export JFROG_ACCESS_TOKEN=$(curl -g --request GET "${JFROG_URL}/ui/api/v1/system/security/token?services[]=all" \
                                        --header "accept: application/json, text/plain, */*" \
                                        --header "x-requested-with: XMLHttpRequest" \
                                        --header "cookie: ACCESSTOKEN=${ACCESSTOKEN}; REFRESHTOKEN=${REFRESHTOKEN}")
            - make acceptance
          onSuccess:
            - echo "Success"
            - export STATE="success"
            - export DESCRIPTION="All tests passed successfully."
            - ./scripts/github-status.sh ${res_GitHubVaultPluginRepoJFrog_gitProvider_token} ${res_GitHubVaultPluginRepoJFrog_gitRepoFullName} ${res_GitHubVaultPluginRepoJFrog_commitSha}
            - send_notification partnership_slack --text "${pipeline_name} step <${step_url}|${step_name}> is completed. Version ${NEXT_VERSION:-" wasn't set"}."
          onFailure:
            - echo "Failure"
            - export STATE="failure"
            - export DESCRIPTION="Pipeline has failed."
            - ./scripts/github-status.sh ${res_GitHubVaultPluginRepoJFrog_gitProvider_token} ${res_GitHubVaultPluginRepoJFrog_gitRepoFullName} ${res_GitHubVaultPluginRepoJFrog_commitSha}
            - send_notification partnership_slack --text "${pipeline_name} pipeline failed on <${step_url}|${step_name}> step."
          onComplete:
            - echo "Complete"
